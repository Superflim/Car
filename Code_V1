
/*
   example code for car project M5 with the FX IMU sensor
   v0.2
*/

//configurable items
#define SERIALPORT Serial //define debug output. Serial is via USB, Serial3 is bluetooth
#define BAUDRATE 9600 //9600 for Serial3
#define GEARING  47 //47, 31 motor gearing. Change to your motor
#define PPR  48 //Pulses per revolution. See rotary encode spec


//libraries used
/* IMU:The libraries mentioned above are already available in the Arduino Library Manager,
   and should be installed there to facilitate version tracking and easy software updates.
   Open up the Library Manager... through the menu Sketch->Include Library->Library Manager...
   Then type in "Adafruit AHRS", "Adafruit Sensor", etc., to locate and install the libraries

*/

#include <Adafruit_FXAS21002C.h>
#include <Adafruit_FXOS8700.h>
#include <Adafruit_Sensor.h>

//other libraries: included in Arduino
#include <Wire.h>
#include <Servo.h>

/* Rotary Encoder: Open up the Library Manager... through the menu Sketch->Include Library->Library Manager...
   Then type in Encoder to locate and install the libraries (from Paul Stoffregen)
   https://www.pjrc.com/teensy/td_libs_Encoder.html

*/

#define ENCODER_OPTIMIZE_INTERRUPTS
#include <Encoder.h>


//encoder declarations. Do not change!
// Motor encoder external interrupt pins (no other pins allowed!) Pins 18 and 19 are only available on the Arduino Mega
#define ENCA_L  19       // Encoder A input         Yellow
#define ENCB_L  2        // Encoder B input         Green
#define ENCA_R  18        // Encoder A input         Yellow
#define ENCB_R  3        // Encoder B input         Green

//Left motor = pins 19,2
//Right motor = pins 18,3

Encoder knobLeft(19, 2);
Encoder knobRight(18, 3);

float cpr = GEARING * PPR;

//servo declarations
Servo myservo;  // create servo object to control a servo
// twelve servo objects can be created on most boards


// motor pins. Do not change
#define PWMA  5         // Motor A PWM control     Orange
#define AIN2  7         // Motor A input 2         Brown
#define AIN1  4       // Motor A input 1         Green
#define BIN1  10       // Motor B input 1         Yellow
#define BIN2  8       // Motor B input 2         Purple
#define PWMB  6       // Motor B PWM control     White


/* Assign a unique ID to this sensor at the same time */
Adafruit_FXOS8700 accelmag = Adafruit_FXOS8700(0x8700A, 0x8700B);

/* Assign a unique ID to this sensor at the same time */
Adafruit_FXAS21002C gyro = Adafruit_FXAS21002C(0x0021002C);

//global variables
int pos = 35;    // variable to store the servo position
int speed = 0;
int startPos = 35; //neutral posistion servo in degrees


void setup() { //leave as is
  myservo.attach(9);  // attaches the servo on pin 9 to the servo object
  Serial.begin(9600);
  initMotors(); //function to setup motor
  initIMU(); //init IMU. Change ranges in this function
  pinMode( 15, INPUT_PULLUP );

  //set steering in neutral position and wait 2 sec
  myservo.write(startPos);
  delay(2000);
}

/////////////////Rotary encoder////////////////

//Read position
long positionLeft  = 0;
long positionRight = 0;

long tNow = micros(); // timestap of calculations in microseconds

long tPrev = tNow;
float dT = (tNow - tPrev) / 1e6; // calculated time difference in second

long prevPositionLeft = positionLeft;
long prevPositionRight = positionRight;

long dPosL = positionLeft - prevPositionLeft; //number of pulses since last measurement
long dPosR = positionRight - prevPositionRight; // dito

float VelocityL = dPosL / dT; // actual calculation in pulses per second
float VelocityR = dPosR / dT;



/////////////////////////////////////////
void loop() {
 long newLeft, newRight;
  newLeft = knobLeft.read();
  newRight = knobRight.read();
  
  if (newLeft != positionLeft || newRight != positionRight) {
    Serial.print("Left = ");
    Serial.print(newLeft);
    Serial.print(", Right = ");
    Serial.print(newRight);
    Serial.println();
    positionLeft = newLeft;
    positionRight = newRight;
    }
    
  if (newLeft < 3000){
    forwardA(120);
    forwardB(180);
  }
  else
    brakeA();
    brakeB();
    
}

/////////////////////////////////////////

//functions
void forwardA(uint16_t pwm) { //addapted to wiring
  digitalWrite(AIN1, HIGH);
  digitalWrite(AIN2, LOW);
  analogWrite(PWMA, pwm);
}
void forwardB(uint16_t pwm) { //addapted to wiring
  digitalWrite(BIN1, HIGH);
  digitalWrite(BIN2, LOW);
  analogWrite(PWMB, pwm);
}
void reverseA(uint16_t pwm) { //addapted to wiring
  digitalWrite(AIN1, LOW);
  digitalWrite(AIN2, HIGH);
  analogWrite(PWMA, pwm);
}
void reverseB(uint16_t pwm) { //addapted to wiring
  digitalWrite(BIN1, LOW);
  digitalWrite(BIN2, HIGH);
  analogWrite(PWMB, pwm);
}
void brakeA() {
  digitalWrite(AIN1, LOW);
  digitalWrite(AIN2, LOW);
}
void brakeB() {
  digitalWrite(BIN1, LOW);
  digitalWrite(BIN2, LOW);
}

void initMotors() {
  pinMode(AIN1, OUTPUT);
  pinMode(AIN2, OUTPUT);
  pinMode(PWMA, OUTPUT);
  pinMode(BIN1, OUTPUT);
  pinMode(BIN2, OUTPUT);
  pinMode(PWMB, OUTPUT);

}
void initIMU() {
  SERIALPORT.println("Gyroscope Test");
  SERIALPORT.println("");
  /* Initialise the sensor */
  if (!gyro.begin()) {
    /* There was a problem detecting the FXAS21002C ... check your connections
    */
    SERIALPORT.println("Ooops, no FXAS21002C detected ... Check your wiring!");
    while (1)
      ;
  }
  SERIALPORT.println("FXOS8700 Test");
  SERIALPORT.println("");
  /* Initialise the sensor */
  if (!accelmag.begin()) {
    /* There was a problem detecting the FXOS8700 ... check your connections */
    SERIALPORT.println("Ooops, no FXOS8700 detected ... Check your wiring!");
    while (1)
      ;
  }

  /* Set gyro range. (optional, default is 250 dps) */
  // dps = degrees per second. Sensoroutput unit is rad/s
     gyro.setRange(GYRO_RANGE_250DPS);
  // gyro.setRange(GYRO_RANGE_500DPS);
  // gyro.setRange(GYRO_RANGE_1000DPS);
  // gyro.setRange(GYRO_RANGE_2000DPS);


  /* Display some basic information on this sensor */
  displaySensorDetailsGyro();

  /* Set accelerometer range (optional, default is 2G) */
  // 2G = 2*9,81, output unit in m/s^2
  // accelmag.setAccelRange(ACCEL_RANGE_2G);
  // accelmag.setAccelRange(ACCEL_RANGE_4G);
  // accelmag.setAccelRange(ACCEL_RANGE_8G);

  /* Display some basic information on this sensor */
  displaySensorDetailsAccel();
}


void displaySensorDetailsGyro(void) {
  sensor_t gyroscope;
  gyro.getSensor(&gyroscope);
  SERIALPORT.println("------------------------------------");
  SERIALPORT.println("GYROSCOPE");
  SERIALPORT.println("------------------------------------");
  SERIALPORT.print("Sensor:       ");
  SERIALPORT.println(gyroscope.name);
  SERIALPORT.print("Driver Ver:   ");
  SERIALPORT.println(gyroscope.version);
  SERIALPORT.print("Unique ID:    0x");
  SERIALPORT.println(gyroscope.sensor_id, HEX);
  SERIALPORT.print("Max Value:    ");
  SERIALPORT.print(gyroscope.max_value, 4);
  SERIALPORT.println(" rad/s");
  SERIALPORT.print("Min Value:    ");
  SERIALPORT.print(gyroscope.min_value, 4);
  SERIALPORT.println(" rad/s");
  SERIALPORT.print("Resolution: (no meaning)   ");
  SERIALPORT.print(gyroscope.resolution, 8);
  SERIALPORT.println(" rad/s");
  SERIALPORT.println("------------------------------------");
  SERIALPORT.println("");
  delay(500);
}
void displaySensorDetailsAccel(void) {
  sensor_t accel;
  accelmag.getSensor(&accel);
  SERIALPORT.println("------------------------------------");
  SERIALPORT.println("ACCELEROMETER");
  SERIALPORT.println("------------------------------------");
  SERIALPORT.print("Sensor:       ");
  SERIALPORT.println(accel.name);
  SERIALPORT.print("Driver Ver:   ");
  SERIALPORT.println(accel.version);
  SERIALPORT.print("Unique ID:    0x");
  SERIALPORT.println(accel.sensor_id, HEX);
  SERIALPORT.print("Min Delay:    ");
  SERIALPORT.print(accel.min_delay);
  SERIALPORT.println(" s");
  SERIALPORT.print("Max Value:    ");
  SERIALPORT.print(accel.max_value, 4);
  SERIALPORT.println(" m/s^2");
  SERIALPORT.print("Min Value:    ");
  SERIALPORT.print(accel.min_value, 4);
  SERIALPORT.println(" m/s^2");
  SERIALPORT.print("Resolution:   ");
  SERIALPORT.print(accel.resolution, 8);
  SERIALPORT.println(" m/s^2");
  SERIALPORT.println("------------------------------------");
  SERIALPORT.println("");
}
